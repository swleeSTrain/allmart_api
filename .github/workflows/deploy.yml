name: CI/CD Pipeline for Spring Boot on Amazon Linux
#메인푸시할때 실행
on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Amazon Corretto JDK 설정
      - name: Set up Amazon Corretto JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 캐시 사용 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. .env 파일 생성
      - name: Create .env file
        run: |
          touch .env
          echo "${{ secrets.ENV_CONTENT }}" > .env
        env:
          ${{ secrets.ENV_CONTENT }}
      # 5. gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle 빌드 및 테스트 실행
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon

#      - name: Run Tests
#        run: ./gradlew test --no-daemon

      # 7. 빌드 결과물 업로드 (JAR 파일)
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: build/libs/*.jar

      # 8. .env 파일 업로드
      - name: Upload .env file
        uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: .env

  deploy:
    name: Deploy to EC2
    needs: build # 빌드 작업이 성공적으로 완료된 후 실행됨
    runs-on: ubuntu-latest

    steps:
      # 1. 빌드 결과물 다운로드
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app

      # 2. .env 파일 다운로드
      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file

      # 3. EC2에 파일 전송 및 배포 실행
      - name: Deploy to EC2 instance
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ec2-user # Amazon Linux 기본 사용자 이름
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key

          # JAR 파일 및 .env 파일 전송
          scp -o StrictHostKeyChecking=no -i private_key *.jar ${USERNAME}@${HOST}:~/app/app.jar
          scp -o StrictHostKeyChecking=no -i private_key .env ${USERNAME}@${HOST}:~/app/.env

          # EC2에서 배포 스크립트 실행
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST} << EOF
            sudo yum update -y
            sudo yum install -y java-17-amazon-corretto-devel

            # 애플리케이션 디렉토리로 이동 및 서비스 재시작
            sudo mkdir -p /opt/myapp
            sudo mv ~/app/app.jar /opt/myapp/app.jar
            sudo mv ~/app/.env /opt/myapp/.env

            # systemd 서비스 재시작 (myapp.service는 사전에 설정되어 있어야 함)
            sudo systemctl daemon-reload
            sudo systemctl restart myapp.service || sudo systemctl start myapp.service

            # 서비스 상태 확인
            sudo systemctl status myapp.service || true
          EOF
